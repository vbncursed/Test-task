import { Request, Response } from "express";
import { body, validationResult } from "express-validator";
import User from "../models/User";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";
import { Op } from "sequelize";
import dotenv from "dotenv";
import {AuthRequest} from "../types/authRequest";

dotenv.config();

const JWT_SECRET = process.env.JWT_SECRET as string;
if (!JWT_SECRET) {
    throw new Error("JWT_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env");
}


interface UserParams {
    id: string;
}

const validateRegistration = [
    body("firstName").notEmpty().withMessage("–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"),
    body("lastName").notEmpty().withMessage("–§–∞–º–∏–ª–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞"),
    body("login")
        .notEmpty().withMessage("–õ–æ–≥–∏–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
        .isAlphanumeric().withMessage("–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã")
        .isLength({ min: 4 }).withMessage("–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 4 —Å–∏–º–≤–æ–ª–æ–≤"),
    body("password")
        .isLength({ min: 8 }).withMessage("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤")
        .matches(/\d/).withMessage("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É")
        .matches(/[A-Z]/).withMessage("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É")
        .matches(/[!@#$%^&*]/).withMessage("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–µ—Ü. —Å–∏–º–≤–æ–ª"),
];

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const registerUser = async (req: Request, res: Response) => {
    try {
        // üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await body("firstName").trim().notEmpty().withMessage("–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ").isAlpha("ru-RU").run(req);
        await body("lastName").trim().notEmpty().withMessage("–§–∞–º–∏–ª–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞").isAlpha("ru-RU").run(req);
        await body("middleName").optional().trim().isAlpha("ru-RU").run(req);
        await body("login").trim().notEmpty().withMessage("–õ–æ–≥–∏–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω").isAlphanumeric().run(req);
        await body("password")
            .isLength({ min: 8 })
            .matches(/\d/)
            .matches(/[A-Z]/)
            .matches(/[!@#$%^&*]/)
            .run(req);

        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ errors: errors.array() });
        }

        const { firstName, lastName, middleName, login, password, managerId } = req.body;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const existingUser = await User.findOne({ where: { login: { [Op.eq]: login } } });
        if (existingUser) {
            return res.status(400).json({ message: "–õ–æ–≥–∏–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è" });
        }

        // ‚úÖ –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newUser = await User.create({
            firstName,
            lastName,
            middleName: middleName || null,
            login,
            password: password,
            managerId: managerId ?? null,
        });

        // üîë –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT-—Ç–æ–∫–µ–Ω (–¥–æ–±–∞–≤–ª—è–µ–º firstName, lastName, middleName, –∫–∞–∫ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ)
        const token = jwt.sign(
            {
                userId: newUser.id,
                login: newUser.login,
                firstName: newUser.firstName,
                lastName: newUser.lastName,
                middleName: newUser.middleName ? newUser.middleName : "",
            },
            JWT_SECRET,
            { expiresIn: "24h" }
        );

        return res.status(201).json({ message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞", token });
    } catch (error) {
        console.error(error);
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};


// ‚úÖ –ü–æ–ª–Ω–∞—è SQL-–∑–∞—â–∏—Ç–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ
export const loginUser = async (req: Request, res: Response) => {
    try {
        await body("login").trim().notEmpty().isAlphanumeric().run(req);
        await body("password").notEmpty().run(req);

        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ errors: errors.array() });
        }

        const { login, password } = req.body;

        // üõ° –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await User.findOne({ where: { login: { [Op.eq]: login } } });
        if (!user) {
            return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
        }

        // üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
        }

        // üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
        const token = jwt.sign(
            {
                userId: user.id,
                login: user.login,
                firstName: user.firstName, // ‚úÖ –ö–æ–¥–∏—Ä—É–µ–º —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
                lastName: user.lastName,
                middleName: user.middleName ? user.middleName : "",
            },
            JWT_SECRET,
            { expiresIn: "24h" });

        return res.status(200).json({ message: "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω", token });
    } catch (error) {
        console.error(error);
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ userId
export const getUserById = async (
    req: Request<UserParams>,
    res: Response
): Promise<void> => {
    try {
        const { id } = req.params;
        const user = await User.findOne({
            where: { id },
            attributes: ["id", "firstName", "lastName", "middleName", "login"], // ‚úÖ –¢–µ–ø–µ—Ä—å –æ—Ç–¥–∞–µ–º `login`
        });

        if (!user) {
            res.status(404).json({ message: "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
            return;
        }

        res.status(200).json(user);
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};

export const getSubordinates = async (req: AuthRequest, res: Response) => {
    try {
        const userId = req.user?.id; // ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è)

        if (!userId) {
            res.status(401).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });
        }

        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö managerId = userId
        const subordinates = await User.findAll({
            where: { managerId: userId },
            attributes: ["id", "firstName", "lastName", "middleName", "login"], // –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
        });

        res.status(200).json(subordinates);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
export const getManagers = async (req: Request, res: Response) => {
    try {
        const managers = await User.findAll({
            where: { managerId: null }, // –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, —É –∫–æ–≥–æ –Ω–µ—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
            attributes: ["id", "firstName", "lastName", "middleName"], // –ü–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
        });

        res.status(200).json(managers);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};

export { validateRegistration };
