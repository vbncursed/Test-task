import { Response } from "express";
import Task from "../models/Task";
import User from "../models/User";
import { AuthRequest } from "../types/authRequest"; // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∏–ø
import { Op } from "sequelize";
import { body, validationResult } from "express-validator";

// ‚úÖ –ü–æ–ª–Ω–∞—è SQL-–∑–∞—â–∏—Ç–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á
export const createTask = async (req: AuthRequest, res: Response): Promise<void> => {
    try {
        // üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await body("title").trim().notEmpty().isString().escape().run(req);
        await body("description").trim().optional().isString().escape().run(req);
        await body("dueDate").notEmpty().isISO8601().run(req);
        await body("priority").notEmpty().isIn(["low", "medium", "high"]).run(req);
        await body("status").notEmpty().isIn(["todo", "in-progress", "done", "canceled"]).escape().run(req);
        await body("assignee").trim().notEmpty().isAlphanumeric().isLength({ min: 3, max: 20 }).run(req);

        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            res.status(400).json({ errors: errors.array() });
            return;
        }

        const { title, description, dueDate, priority, status, assignee } = req.body;

        // üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç `user`
        if (!req.user || !req.user.id) {
            res.status(403).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });
            return;
        }

        // üõ° –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const assigneeUser = await User.findOne({ where: { login: { [Op.eq]: assignee } } });
        if (!assigneeUser) {
            res.status(400).json({ message: "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
            return;
        }

        // ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç SQL-–∏–Ω—ä–µ–∫—Ü–∏–π
        const newTask = await Task.create({
            title,
            description,
            dueDate,
            priority,
            status,
            creatorId: req.user.id, // –ò–∑ —Ç–æ–∫–µ–Ω–∞
            assigneeId: assigneeUser.id,
        });

        res.status(201).json({ message: "–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞", task: newTask });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};

export const updateTask = async (req: AuthRequest, res: Response): Promise<void> => {
    try {
        // üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await body("title").trim().notEmpty().isString().escape().run(req);
        await body("description").trim().optional().isString().escape().run(req);
        await body("dueDate").notEmpty().isISO8601().run(req);
        await body("priority").notEmpty().isIn(["low", "medium", "high"]).run(req);
        await body("status").notEmpty().isIn(["todo", "in-progress", "done", "canceled"]).escape().run(req);
        await body("assignee").trim().notEmpty().isAlphanumeric().isLength({ min: 3, max: 20 }).run(req);

        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            res.status(400).json({ errors: errors.array() });
            return;
        }

        const { id } = req.params;
        const { title, description, dueDate, priority, status, assignee } = req.body;

        // üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç `user`
        if (!req.user || !req.user.id) {
            res.status(403).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });
            return;
        }

        // üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–¥–∞—á–∞
        const task = await Task.findByPk(id);
        if (!task) {
            res.status(404).json({ message: "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
            return;
        }

        // üõ° –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ createTask)
        const assigneeUser = await User.findOne({ where: { login: { [Op.eq]: assignee } } });
        if (!assigneeUser) {
            res.status(400).json({ message: "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
            return;
        }

        // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
        task.title = title;
        task.description = description;
        task.dueDate = dueDate;
        task.priority = priority;
        task.status = status;
        task.assigneeId = assigneeUser.id;

        await task.save();

        res.status(200).json({ message: "–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", task });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};

// üìå –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö)
export const getTasks = async (req: AuthRequest, res: Response): Promise<void> => {
    try {
        if (!req.user) {
            res.status(403).json({ message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
            return;
        }

        // üõ°Ô∏è –ï—Å–ª–∏ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Ç–æ —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∏–ª–∏ —Ç–µ, –≥–¥–µ –æ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        const tasks = await Task.findAll({
            where: {
                [Op.or]: [{ creatorId: req.user.id }, { assigneeId: req.user.id }]
            }
        });

        res.status(200).json(tasks);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};
