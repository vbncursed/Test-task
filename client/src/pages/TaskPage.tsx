import { useContext, useState } from "react";
import { TaskContext, Task } from "../context/TaskContext";
import TaskCard from "../components/TaskCard";
import TaskModal from "../components/TaskModal";
import Select from "../components/Select";
import "../styles/TaskPage.scss";
import { AuthContext } from "../context/AuthContext.ts";

const TaskPage = () => {
    const taskContext = useContext(TaskContext);
    if (!taskContext) {
        throw new Error("TaskContext must be used within a TaskProvider");
    }

    const authContext = useContext(AuthContext);
    if (!authContext) {
        throw new Error("AuthContext must be used within an AuthProvider");
    }
    const { user } = authContext;

    const { tasks, createTask, updateTask } = taskContext;
    const [selectedTask, setSelectedTask] = useState<Task | null>(null);
    const [isCreating, setIsCreating] = useState(false);
    const [viewMode, setViewMode] = useState<"all" | "date" | "assignee">("all");

    const groupTasksByDate = (task: Task): "today" | "thisWeek" | "future" | "overdue" => {
        const dueDate = new Date(task.dueDate);
        const today = new Date();

        // –ü—Ä–∏–≤–æ–¥–∏–º –¥–∞—Ç—ã –∫ –æ–¥–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É (—É–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è)
        today.setHours(0, 0, 0, 0);
        dueDate.setHours(0, 0, 0, 0);

        const diffTime = dueDate.getTime() - today.getTime();
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

        if (diffDays === 0) return "today";
        if (diffDays > 0 && diffDays <= 7) return "thisWeek";
        if (diffDays > 7) return "future";
        return "overdue"; // –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º
    };

    const groupTasksByAssignee = (tasks: Task[]): Record<string, Task[]> => {
        return tasks.reduce((acc, task) => {
            const assignee = task.assigneeName || "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"; // –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ, –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"

            if (!acc[assignee]) {
                acc[assignee] = [];
            }

            acc[assignee].push(task);
            return acc;
        }, {} as Record<string, Task[]>);
    };

    return (
        <div className="task-page">
            <h2>–ó–ê–î–ê–ß–ò</h2>
            <div className="task-controls">
                <Select
                    label="–†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                    options={[
                        { value: "all", label: "–í—Å–µ –∑–∞–¥–∞—á–∏" },
                        { value: "date", label: "–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ –¥–∞—Ç–µ" },
                        { value: "assignee", label: "–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º" },
                    ]}
                    value={viewMode} // üëà –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∂–∏–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                    onChange={(value) => setViewMode(value as "all" | "date" | "assignee")}
                />
                <button className="create-task-button" onClick={() => setIsCreating(true)}>
                    –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞
                </button>
            </div>

            <div className="task-list">
                {viewMode === "all" && (
                    <>
                        {["todo", "in_progress", "done", "canceled"].map((status) => {
                            const filteredTasks = tasks.filter((task) => task.status === status);

                            if (filteredTasks.length === 0) return null; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç–∞—Ç—É—Å—ã

                            return (
                                <div key={status} className="task-group">
                                    <h3>
                                        {status === "todo"
                                            ? "üî• –ù–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å"
                                            : status === "in_progress"
                                                ? "‚ö° –í –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
                                                : status === "done"
                                                    ? "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ"
                                                    : "‚ú® –û—Ç–º–µ–Ω–µ–Ω–æ"}
                                    </h3>
                                    {filteredTasks.map((task) => (
                                        <TaskCard key={task.id ?? `temp-${task.title}-${Date.now()}`} task={task} onClick={() => setSelectedTask(task)} />
                                    ))}
                                </div>
                            );
                        })}
                    </>
                )}

                {viewMode === "date" &&
                    (["today", "thisWeek", "future", "overdue"] as const).map((group) => (
                        <div key={group} className="task-group">
                            <h3>
                                {group === "today"
                                    ? "–°–µ–≥–æ–¥–Ω—è"
                                    : group === "thisWeek"
                                        ? "–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ"
                                        : group === "future"
                                            ? "–ë—É–¥—É—â–µ–µ"
                                            : "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ"}
                            </h3>
                            {tasks.filter((task) => groupTasksByDate(task) === group).map((task) => (
                                <TaskCard key={task.id ?? `temp-${task.title}-${Date.now()}`} task={task} onClick={() => setSelectedTask(task)} />
                            ))}
                        </div>
                    ))}

                {viewMode === "assignee" &&
                    Object.entries(groupTasksByAssignee(tasks)).map(([assignee, assigneeTasks]) => (
                        <div key={assignee} className="task-group">
                            <h3>{assignee}</h3>
                            {assigneeTasks.map((task) => (
                                <TaskCard key={task.id ?? `temp-${task.title}-${Date.now()}`} task={task} onClick={() => setSelectedTask(task)} />
                            ))}
                        </div>
                    ))}
            </div>

            {(selectedTask || isCreating) && (
                <TaskModal
                    task={selectedTask || {
                        title: "",
                        description: "",
                        priority: "medium",
                        status: "todo",
                        assigneeId: user ? user.id : 0, // ID –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
                        dueDate: new Date().toISOString().split("T")[0],
                        createdAt: new Date().toISOString().split("T")[0],
                        updatedAt: new Date().toISOString().split("T")[0],
                        creatorId: user ? user.id : 0 // –ò—Å–ø–æ–ª—å–∑—É–µ–º user.id –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
                    }}
                    onClose={() => {
                        setSelectedTask(null);
                        setIsCreating(false);
                    }}
                    onSave={isCreating ? createTask : updateTask}
                />

            )}
        </div>
    );
};

export default TaskPage;
