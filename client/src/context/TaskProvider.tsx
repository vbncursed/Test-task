import { Task, TaskContext } from "./TaskContext";
import { ReactNode, useState, useEffect, useContext } from "react";
import axios from "axios";
import { AuthContext } from "./AuthContext.ts";

interface TaskProviderProps {
    children: ReactNode;
}

export const TaskProvider = ({ children }: TaskProviderProps) => {
    const [tasks, setTasks] = useState<Task[]>([]);
    const [assignees, setAssignees] = useState<{ value: number; label: string; login: string }[]>([]);
    const API_URL = import.meta.env.VITE_API_URL;
    const authContext = useContext(AuthContext);

    if (!authContext) {
        throw new Error("AuthContext must be used within an AuthProvider");
    }

    const { user } = authContext;

    // üîπ –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ "YYYY-MM-DD"
    const formatDate = (dateString: string): string => dateString.split("T")[0];

    // üîπ –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö –∏ —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö
    // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö
    const fetchAssignees = async () => {
        try {
            const token = localStorage.getItem("token");
            if (!token) return;

            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö (–Ω–æ –ª–æ–≥–∏–Ω–∞ —Ç–∞–º –Ω–µ—Ç)
            const response = await axios.get<{ id: number; firstName: string; lastName: string; middleName?: string }[]>(
                `${API_URL}/auth/subordinates`,
                { headers: { Authorization: `Bearer ${token}` } }
            );

            // üî• –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ª–æ–≥–∏–Ω—ã –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ `id`
            const subordinatesWithLogin = await Promise.all(
                response.data.map(async (sub) => {
                    try {
                        const userResponse = await axios.get<{ login: string }>(
                            `${API_URL}/auth/users/${sub.id}`,
                            { headers: { Authorization: `Bearer ${token}` } }
                        );

                        return {
                            value: sub.id,
                            label: `${sub.lastName} ${sub.firstName} ${sub.middleName || ""}`.trim(),
                            login: userResponse.data.login, // ‚úÖ –¢–µ–ø–µ—Ä—å —É –Ω–∞—Å –µ—Å—Ç—å –ª–æ–≥–∏–Ω
                        };
                    } catch (error) {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–∏–Ω–∞ –¥–ª—è ID ${sub.id}:`, error);
                        return {
                            value: sub.id,
                            label: `${sub.lastName} ${sub.firstName} ${sub.middleName || ""}`.trim(),
                            login: "",
                        };
                    }
                })
            );

            // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –µ–≥–æ –ª–æ–≥–∏–Ω–æ–º
            setAssignees([
                { value: user?.id || 0, label: "–Ø", login: user?.login || "" },
                ...subordinatesWithLogin,
            ]);

            console.log("üîç –ó–∞–≥—Ä—É–∂–µ–Ω—ã assignees:", [{ value: user?.id || 0, label: "–Ø", login: user?.login || "" }, ...subordinatesWithLogin]);
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö:", error);
        }
    };

    const fetchUserById = async (userId: number) => {
        try {
            const token = localStorage.getItem("token");
            if (!token) throw new Error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω");

            const response = await axios.get(`${API_URL}/auth/users/${userId}`, {
                headers: { Authorization: `Bearer ${token}` },
            });

            return response.data; // { id, firstName, lastName, middleName, login }
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
            return null;
        }
    };

    // üîπ –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á —Å —Å–µ—Ä–≤–µ—Ä–∞
    const fetchTasks = async () => {
        if (!user) return;

        try {
            const token = localStorage.getItem("token");
            if (!token) throw new Error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω");

            const response = await axios.get<Task[]>(`${API_URL}/tasks`, {
                headers: { Authorization: `Bearer ${token}` },
            });

            console.log("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:", response.data);

            // üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º
            const tasksWithNames = await Promise.all(
                response.data.map(async (task) => {
                    const creator = await fetchUserById(task.creatorId);
                    const assignee = await fetchUserById(task.assigneeId);

                    return {
                        ...task,
                        creatorName: creator ? `${creator.lastName} ${creator.firstName} ${creator.middleName || ""}`.trim() : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π",
                        assigneeName: assignee ? `${assignee.lastName} ${assignee.firstName} ${assignee.middleName || ""}`.trim() : "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
                    };
                })
            );

            setTasks(tasksWithNames);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á:", error);
        }
    };

    // üîπ –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    const updateTask = async (updatedTask: Task) => {
        if (!updatedTask.id) {
            console.error("–û—à–∏–±–∫–∞: id –∑–∞–¥–∞—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!");
            return;
        }

        try {
            const token = localStorage.getItem("token");
            if (!token) throw new Error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω");

            // üîπ –ù–∞—Ö–æ–¥–∏–º –ª–æ–≥–∏–Ω –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            const assignee = assignees.find((a) => a.value === updatedTask.assigneeId);
            if (!assignee) {
                throw new Error(`–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Å ID ${updatedTask.assigneeId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }

            const formattedTask = {
                title: updatedTask.title.trim(),
                description: updatedTask.description.trim(),
                dueDate: formatDate(updatedTask.dueDate),
                priority: updatedTask.priority,
                status: updatedTask.status,
                assignee: assignee.login, // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏–Ω –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
                updatedAt: new Date().toISOString(),
            };

            console.log("üì§ –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", JSON.stringify(formattedTask, null, 2));

            await axios.put(`${API_URL}/tasks/${updatedTask.id}`, formattedTask, {
                headers: { Authorization: `Bearer ${token}` },
            });

            // ‚úÖ –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
            await fetchTasks();

            console.log("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!");
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:", error);
        }
    };

    // üîπ –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    const createTask = async (newTask: Task) => {
        try {
            const token = localStorage.getItem("token");
            if (!token) throw new Error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω");

            if (!user) throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ");

            // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π
            if (!newTask.assigneeId) {
                throw new Error("–ù–µ –≤—ã–±—Ä–∞–Ω –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å");
            }

            // üîç –ù–∞—Ö–æ–¥–∏–º –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ `assigneeId`
            const assignee = assignees.find(a => a.value === Number(newTask.assigneeId));
            console.log("üõ† –ù–∞–π–¥–µ–Ω –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:", assignee); // <-- –î–ï–ë–ê–ì
            console.log("üîç –ò—â–µ–º assigneeId:", newTask.assigneeId);
            console.log("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ assignees:", assignees.map(a => ({ value: a.value, login: a.login })));


            if (!assignee) {
                throw new Error(`–í—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Å ID ${newTask.assigneeId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }

            console.log("üîç –ò—â–µ–º assigneeId:", newTask.assigneeId);
            console.log("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ assignees:", assignees.map(a => ({ value: a.value, login: a.login })));


            // üîπ –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞
            const formattedTask = {
                title: newTask.title.trim(),
                description: newTask.description.trim(),
                dueDate: newTask.dueDate,
                priority: newTask.priority,
                status: newTask.status,
                assignee: assignee.login, // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏–Ω
            };

            console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", JSON.stringify(formattedTask, null, 2));

            console.log("üîç –ò—â–µ–º assigneeId:", newTask.assigneeId);
            console.log("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ assignees:", assignees.map(a => ({ value: a.value, login: a.login })));

            const response = await axios.post<Task>(`${API_URL}/tasks`, formattedTask, {
                headers: { Authorization: `Bearer ${token}` },
            });

            setTasks((prevTasks) => [...prevTasks, response.data]);

            console.log("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:", response.data);
            await fetchTasks();
        } catch (error: unknown) {
            if (axios.isAxiosError(error)) {
                console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:", error.response?.data || error.message);
            } else if (error instanceof Error) {
                console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
            } else {
                console.error("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏");
            }
        }
    };


    // üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –∏ –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
    useEffect(() => {
        fetchTasks();
        fetchAssignees();
    }, [user]);

    return (
        <TaskContext.Provider value={{ tasks, fetchTasks, updateTask, createTask }}>
            {children}
        </TaskContext.Provider>
    );
};
